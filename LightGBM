import numpy as np
import pandas as pd
import lightgbm as lgb
from sklearn.model_selection import train_test_split, cross_val_predict
from sklearn.metrics import roc_curve, auc, recall_score, precision_score, f1_score, accuracy_score, roc_auc_score
from sklearn.preprocessing import MinMaxScaler
from imblearn.over_sampling import ADASYN
from hyperopt import hp, fmin, tpe, STATUS_OK, Trials, space_eval
import matplotlib.pyplot as plt
from openpyxl import Workbook
from matplotlib.font_manager import FontProperties
from sklearn.metrics import confusion_matrix
# 异常处理，确保文件路径正确
try:
    # 读取Excel数据
    data = pd.read_excel(r'XXXX'')
except Exception as e:
    print(f"读取Excel文件时出错: {e}")

# 分离特征和目标变量
scaler = MinMaxScaler()
X = data.drop(['F','TEM'], axis=1)
y = data['F'].astype(int)  # 确保目标变量是整数类型

# 归一化处理特征变量
X_scaled = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
# 不平衡数据集处理
oversampler = ADASYN(random_state=123)
X_resampled, y_resampled = oversampler.fit_resample(X_train, y_train)



# 创建LightGBM模型
model = lgb.LGBMClassifier()

# 参数范围
space = {
    'num_leaves': hp.choice('num_leaves', range(2, 10)),
    'learning_rate': hp.uniform('learning_rate', 0.01, 0.3),
    'max_depth': hp.choice('max_depth', range(3, 19)),
    'subsample': hp.uniform('subsample', 0.7, 1),
    'colsample_bytree': hp.uniform('colsample_bytree', 0.7, 1),
    'min_split_gain': hp.uniform('min_split_gain', 0, 0.1),
    'n_estimators': hp.choice('n_estimators', range(100, 2000)),
    'min_child_samples': hp.choice('min_child_samples', range(20, 500)),
    'min_child_weight': hp.choice('min_child_weight', [1]),
    'reg_lambda': hp.uniform('reg_lambda', 0, 1),
    'reg_alpha': hp.uniform('reg_alpha', 0, 1)
}

# 目标函数
def objective(space):
    model.set_params(**space)
    # 使用交叉验证预测概率
    y_pred_proba = cross_val_predict(model, X_train, y_train, cv=10, method='predict_proba')[:, 1]
    # 计算性能指标
    f1 = f1_score(y_train, (y_pred_proba > 0.5).astype(int))
    auc_score = roc_auc_score(y_train, y_pred_proba)
    overall_accuracy = accuracy_score(y_train, (y_pred_proba > 0.5).astype(int))
    recall = recall_score(y_train, (y_pred_proba > 0.5).astype(int))
    precision = precision_score(y_train, (y_pred_proba > 0.5).astype(int))
    # 返回需要最小化的负F1分数和其他信息
    return {'loss': -f1, 'status': STATUS_OK, 'f1': f1, 'auc': auc_score, 'accuracy': overall_accuracy,
            'recall': recall, 'precision': precision}

# 使用TPE算法进行优化
trials = Trials()
best = fmin(fn=objective, space=space, algo=tpe.suggest, max_evals=50, trials=trials, rstate=np.random.default_rng(42))
# 创建一个新的Excel工作簿
wb = Workbook()
ws = wb.active
ws.title = 'K-Fold Results'

# 添加标题行
ws.append(['Fold', 'Best Params', 'F1 Score', 'AUC', 'Overall Accuracy', 'Recall', 'Precision'])

# 添加每一折的最优参数和性能指标
for i, trial in enumerate(trials.trials):
    # 从trial中提取参数值，并确保它们不是列表
    params = {key: val[0] if isinstance(val, list) else val for key, val in trial['misc']['vals'].items()}
    best_params = space_eval(space, params)
    fold_result = trial['result']
    ws.append([i + 1, str(best_params), fold_result['f1'], fold_result['auc'],
               fold_result['accuracy'], fold_result['recall'], fold_result['precision']])

# 保存Excel文件
wb.save(r'C:\Users\User1\Desktop\OB分类调参0621.xlsx')

# 获取最优参数
best_params = space_eval(space, best)

# 使用最优参数在测试集上进行检验
final_model = lgb.LGBMClassifier(**best_params)
final_model.fit(X_train, y_train)
y_pred_test = final_model.predict(X_test)
y_pred_proba = final_model.predict_proba(X_test)[:, 1]

# 计算混淆矩阵
tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test).ravel()

# 计算测试集的性能指标
f1 = f1_score(y_test, y_pred_test)
auc_score = roc_auc_score(y_test, y_pred_proba)
overall_accuracy = accuracy_score(y_test, y_pred_test)
recall = recall_score(y_test, y_pred_test)
precision = precision_score(y_test, y_pred_test)

# 输出ROC曲线
fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8,8))
plt.plot(fpr, tpr, color='deepskyblue', lw=3, label='ROC curve (area = %0.2f)' % roc_auc)
plt.fill_between(fpr, tpr, step='post', alpha=0.2, color='deepskyblue')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate', fontname='Arial', fontsize=24, weight='bold')
plt.ylabel('True Positive Rate', fontname='Arial', fontsize=24, weight='bold')
plt.xticks(fontname='Arial', fontsize=20)
plt.yticks(fontname='Arial', fontsize=20)

font_prop = FontProperties(family='Arial', size=24, weight='bold')
plt.legend(loc="lower right", prop=font_prop)

plt.tight_layout()
plt.savefig(r'C:\Users\User1\Desktop\groundwater F\OB分类0621.tif', dpi=500)
plt.show()

# 将结果存储到Excel
wb = Workbook()
ws = wb.active
ws.append(['Best Params', 'F1 Score', 'AUC', 'Overall Accuracy', 'Recall', 'Precision', 'TP', 'FP', 'TN', 'FN'])
ws.append([str(best_params), f1, auc_score, overall_accuracy, recall, precision, tp, fp, tn, fn])
wb.save(r'XXXX.xlsx')
